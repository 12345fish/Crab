/*========================================
FOR 语句标准格式

for (起始值;判断值;步进值)
{
  语句列表;
  continue;
  break;
}

continue 是可选项，它意思是跳过该语句以下的语句，
         直接回到循环头。
break    是可选项，它意思是直接中断跳出循环。

起始值：可以是常量或表达式，例如： i = 1; 也可以忽略不写
判断值：布尔表达式或布尔常量，例如： i < 10; 也可以忽略不写
步进值: 可以是常量或表达式，例如： i++; 也可以忽略不写
========================================*/

function ForDemo
{
  var i,a,b,c;
  
  //这是一个简单的For语句，I从0开始，到10（不包括）结束，步进为1
  for (i = 0; i < 10; i++)
  {
    a = 2;
  }

  //For语句的初值和结束值，都可以是表达式，这里有指定Step步进，以规定的步进执行
  for (i = 1+2+3; i < 4*5*6 ; i+=2.5)
  {
     a = b+c+1;
  }

  //省略三个条件
  for (;;)
  {
    c = c+1;
    if (c == 10) break;
  }

}


/*========================================
WHILE 格式

第一种:
While 表达式
{
  语句列表;
  continue;
  break;
}

第二种：

do
{
} while 表达式 ;

continue 是可选项，它意思是跳过该语句以下的语句，
         直接回到循环头。
break    是可选项，它意思是直接中断跳出循环。

当表达式不为 nil, False, 0, '' 的时候，
则执行语句列表。

第一种和第二种的区别是：
第一种必须先判断表达式为True时，才执行循环。
第二种是先执行循环体一次，再判断表达式，如果为True，
则返回开头再次循环。
========================================*/

function WhileDemo
{
  var i,a,b,c;
  
   //While 语句需要先判断再执行
   while (I > 0) // 当 I 大於 0的时候，执行以下语句
   {
      a = a +3;
   }

   while (a || b)
      c = c +3;

   //如果判断表达式是一个简单的变量，则该语句相当於 (a == nil) or (a == 0) or (a == '')
              //也就是当a为空，或a等於0，或a等於空字符串的时候
   do
   {
      i = i +3;
   } while i;
}


/*========================================
这是一个Repeat循环语句演示程序
REPEAT 语句格式

repeat
  语句列表;
  continue;
  break;
until 表达式;

repeat语句它意味着，不管怎么样，它都会先执行
一次循环中间的语句。
然后当表达式为 nil, False, 0, '' 的时候，
则退出循环，否则回头继续执行。

continue 是可选项，它意思是跳过该语句以下的语句，
         直接跳到 until 的位置去做判断。
break    是可选项，它意思是直接中断跳出循环。
========================================*/
function RepeatDemo
{
   var a,i,j;

   repeat
   {
      a = a + 1;
   }
   until i == 10;   //当i 等於 10 的时间，结束循环，并执行之后的语句

   repeat
   {
      a = a+1;

      if (a == 10)
      {
        break;
      }

      a = 0;
   }
   until i && j;

   repeat
   {
      a = a+1;

      if (a == 10)
      {
        continue;
      }

      a = 0;
   }
   until i;   //如果判断表达式是一个简单的变量，则该语句相当於 (i == nil) or (i == 0) or (i == '')
              //也就是当i为空，或i等於0，或i等於空字符串的时候
}

main
{
}


